service: sistema-gestion-espacios
frameworkVersion: '3'

# Configuración para despliegue unificado (backend + frontend)
custom:
  # Scripts para construir el frontend antes del despliegue
  scripts:
    hooks:
      # Build frontend only when createWebsite=true
      'package:initialize': ${opt:createWebsite, 'false'} == 'true' && cd ../frontend && npm install && npm run build || true
      # Sync and invalidate only when createWebsite=true
      'deploy:finalize': ${opt:createWebsite, 'false'} == 'true' && serverless s3sync && serverless cloudfrontInvalidate || true
  # Configuración para el despliegue del frontend
  frontendDistPath: ../frontend/.next/static
  frontendBucketName: ${self:service}-frontend-${sls:stage}
  # Para el plugin s3-sync
  s3Sync:
    - bucketName: ${self:custom.frontendBucketName}
      localDir: ${self:custom.frontendDistPath}
      acl: public-read
      followSymlinks: true
      defaultContentType: text/html
      params:
        - index.html:
            CacheControl: 'no-cache'
        - "*.js":
            CacheControl: 'public, max-age=31536000'
        - "*.css":
            CacheControl: 'public, max-age=31536000'
        - "*.{png,jpg,gif}":
            CacheControl: 'public, max-age=31536000'
  # Para el plugin CloudFront
  cloudfrontInvalidate:
    distributionIdKey: 'WebsiteDistributionId'
    items:
      - '/*'
  # Variables de entorno para el frontend durante el build
  frontend:
    apiUrl: https://api-url-placeholder/${sls:stage}
    stage: ${sls:stage}
    region: ${self:provider.region}
    # By default we don't create the website (CloudFront + S3) because some
    # deployment environments may not have permissions. Set --param createWebsite=true
    # when you want the stack to include the frontend resources.
    createWebsite: ${opt:createWebsite, 'false'}
    # Split stacks configuration to avoid CloudFormation resource limits
    splitStacks:
      nested: true
      perFunction: false
      perType: false

# Plugins necesarios para el despliegue unificado
plugins:
  - serverless-s3-sync
  - serverless-cloudfront-invalidate
  - serverless-dotenv-plugin
  - serverless-scriptable-plugin
  - serverless-plugin-split-stacks

provider:
  name: aws
  runtime: nodejs20.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    QUEUE_URL: { Ref: MyQueue }
    DB_TYPE: dynamodb
    DYNAMODB_TABLE: ${self:service}-${sls:stage}-table
    USER_POOL_ID: { Ref: CognitoUserPool }
    USER_POOL_CLIENT_ID: { Ref: CognitoUserPoolClient }
    JWT_SECRET: ${env:JWT_SECRET, 'your-super-secret-jwt-key-change-in-production'}
    NODE_ENV: ${sls:stage}
    SNS_TOPIC_ARN: { Ref: SpaceNotificationsTopic }
    SNS_ALERTS_TOPIC_ARN: { Ref: SystemAlertsTopic }
    SNS_ADMIN_TOPIC_ARN: { Ref: AdminNotificationsTopic }
    # WebSocket configuration
    CONNECTIONS_TABLE: ${self:service}-${sls:stage}-connections
    WEBSOCKET_ENDPOINT: 
      Fn::Sub: "${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}"
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            Fn::GetAtt: [ MyQueue, Arn ]
        - Effect: Allow
          Action:
            - sns:Publish
            - sns:Subscribe
            - sns:CreateTopic
            - sns:ListTopics
            - sns:GetTopicAttributes
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ DynamoDBTable, Arn ]
            - Fn::Join:
                - '/'
                - - Fn::GetAtt: [ DynamoDBTable, Arn ]
                  - '*'
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminGetUser
            - cognito-idp:InitiateAuth
            - cognito-idp:RespondToAuthChallenge
          Resource:
            - Fn::GetAtt: [ CognitoUserPool, Arn ]
        # WebSocket permissions
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - Fn::GetAtt: [ WebSocketConnectionsTable, Arn ]
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
          Resource: 
            - Fn::Sub: "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*"
        # DynamoDB Streams permissions for real-time triggers
        - Effect: Allow
          Action:
            - dynamodb:DescribeStream
            - dynamodb:GetRecords
            - dynamodb:GetShardIterator
            - dynamodb:ListStreams
          Resource: 
            - Fn::GetAtt: [ DynamoDBTable, StreamArn ]
  logs:
    httpApi: true
  tracing:
    lambda: true
  timeout: 29
  memorySize: 512
  architecture: arm64
  httpApi:
    cors: true
    authorizers:
      cognitoJwt:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Sub:
            - https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}
            - { UserPoolId: { Ref: CognitoUserPool } }
        audience:
          - { Ref: CognitoUserPoolClient }

functions:
  # Autenticación con Cognito - Optimizado para móviles
  login:
    handler: src/handlers/cognitoAuth.login
    timeout: 10
    memorySize: 256
    events:
      - httpApi:
          method: POST
          path: /api/auth/login

  refresh:
    handler: src/handlers/cognitoAuth.refresh
    timeout: 8
    memorySize: 256
    events:
      - httpApi:
          method: POST
          path: /api/auth/refresh

  me:
    handler: src/handlers/cognitoAuth.me
    timeout: 5
    memorySize: 256
    events:
      - httpApi:
          method: GET
          path: /api/me
          authorizer:
            name: cognitoJwt

  # Endpoints originales con autorización de Cognito
  logout:
    handler: src/handlers/auth.logout
    events:
      - httpApi:
          method: POST
          path: /api/auth/logout
          authorizer:
            name: cognitoJwt

  register:
    handler: src/handlers/auth.register
    events:
      - httpApi:
          method: POST
          path: /api/auth/register

  # === GESTIÓN DE PERSONALIZACIÓN (COMPONENTE SAAS) ===
  
  # Configuración global del cliente
  getClientGlobalConfig:
    handler: src/handlers/personalization.getClientGlobalConfig
    events:
      - httpApi:
          method: GET
          path: /api/personalization/client/{clientId}/global
          authorizer:
            name: cognitoJwt

  updateClientGlobalConfig:
    handler: src/handlers/personalization.updateClientGlobalConfig
    events:
      - httpApi:
          method: PUT
          path: /api/personalization/client/{clientId}/global
          authorizer:
            name: cognitoJwt

  # Configuración específica del usuario
  getUserSpecificConfig:
    handler: src/handlers/personalization.getUserSpecificConfig
    events:
      - httpApi:
          method: GET
          path: /api/personalization/client/{clientId}/user/{userId}
          authorizer:
            name: cognitoJwt

  updateUserSpecificConfig:
    handler: src/handlers/personalization.updateUserSpecificConfig
    events:
      - httpApi:
          method: PUT
          path: /api/personalization/client/{clientId}/user/{userId}
          authorizer:
            name: cognitoJwt

  # Configuración completa (global + específica + externa)
  getCompleteUserConfig:
    handler: src/handlers/personalization.getCompleteUserConfig
    events:
      - httpApi:
          method: GET
          path: /api/personalization/client/{clientId}/user/{userId}/complete
          authorizer:
            name: cognitoJwt

  # Mecanismo de desacople - Carga configuración externa
  loadExternalConfig:
    handler: src/handlers/personalization.loadExternalConfig
    events:
      - httpApi:
          method: POST
          path: /api/personalization/client/{clientId}/load-external
          authorizer:
            name: cognitoJwt

  # Exportar configuración del cliente
  exportClientConfig:
    handler: src/handlers/personalization.exportClientConfig
    events:
      - httpApi:
          method: GET
          path: /api/personalization/client/{clientId}/export
          authorizer:
            name: cognitoJwt

  # Limpiar cache de configuraciones
  clearConfigurationCache:
    handler: src/handlers/personalization.clearConfigurationCache
    events:
      - httpApi:
          method: POST
          path: /api/personalization/cache/clear
          authorizer:
            name: cognitoJwt

  # Configuración por industria
  getIndustryConfig:
    handler: src/handlers/personalization.getIndustryConfig
    events:
      - httpApi:
          method: GET
          path: /api/personalization/industries/{industry}/config
          authorizer:
            name: cognitoJwt

  # Dashboard con protección Cognito - Optimizado para móviles
  dashboard:
    handler: src/handlers/dashboard.getDashboard
    timeout: 15
    memorySize: 1024
    events:
      - httpApi:
          method: GET
          path: /api/dashboard
          authorizer:
            name: cognitoJwt

  estadisticasDetalladas:
    handler: src/handlers/dashboard.getEstadisticasDetalladas
    timeout: 20
    memorySize: 1024
    events:
      - httpApi:
          method: GET
          path: /api/dashboard/estadisticas
          authorizer:
            name: cognitoJwt

  # Espacios con protección Cognito - Optimizado para móviles
  getEspacios:
    handler: src/handlers/espacios.getEspacios
    timeout: 12
    memorySize: 512
    events:
      - httpApi:
          method: GET
          path: /api/espacios
          authorizer:
            name: cognitoJwt

  getEspacio:
    handler: src/handlers/espacios.getEspacio
    events:
      - httpApi:
          method: GET
          path: /api/espacios/{id}
          authorizer:
            name: cognitoJwt

  createEspacio:
    handler: src/handlers/espacios.createEspacio
    events:
      - httpApi:
          method: POST
          path: /api/espacios
          authorizer:
            name: cognitoJwt

  updateEspacio:
    handler: src/handlers/espacios.updateEspacio
    events:
      - httpApi:
          method: PUT
          path: /api/espacios/{id}
          authorizer:
            name: cognitoJwt

  deleteEspacio:
    handler: src/handlers/espacios.deleteEspacio
    events:
      - httpApi:
          method: DELETE
          path: /api/espacios/{id}
          authorizer:
            name: cognitoJwt

  estadisticasEspacios:
    handler: src/handlers/espacios.getEstadisticasEspacios
    events:
      - httpApi:
          method: GET
          path: /api/espacios/estadisticas
          authorizer:
            name: cognitoJwt

  # Reservas con protección Cognito
  getReservas:
    handler: src/handlers/reservas.getReservas
    events:
      - httpApi:
          method: GET
          path: /api/reservas
          authorizer:
            name: cognitoJwt

  getReserva:
    handler: src/handlers/reservas.getReserva
    events:
      - httpApi:
          method: GET
          path: /api/reservas/{id}
          authorizer:
            name: cognitoJwt

  createReserva:
    handler: src/handlers/reservas.createReserva
    events:
      - httpApi:
          method: POST
          path: /api/reservas
          authorizer:
            name: cognitoJwt

  updateReserva:
    handler: src/handlers/reservas.updateReserva
    events:
      - httpApi:
          method: PUT
          path: /api/reservas/{id}
          authorizer:
            name: cognitoJwt

  cancelReserva:
    handler: src/handlers/reservas.cancelReserva
    events:
      - httpApi:
          method: PATCH
          path: /api/reservas/{id}/cancel
          authorizer:
            name: cognitoJwt

  deleteReserva:
    handler: src/handlers/reservas.deleteReserva
    events:
      - httpApi:
          method: DELETE
          path: /api/reservas/{id}
          authorizer:
            name: cognitoJwt

  estadisticasReservas:
    handler: src/handlers/reservas.getEstadisticasReservas
    events:
      - httpApi:
          method: GET
          path: /api/reservas/estadisticas
          authorizer:
            name: cognitoJwt

  # Usuarios con protección Cognito
  getUsuarios:
    handler: src/handlers/usuarios.getUsuarios
    events:
      - httpApi:
          method: GET
          path: /api/usuarios
          authorizer:
            name: cognitoJwt

  getUsuario:
    handler: src/handlers/usuarios.getUsuario
    events:
      - httpApi:
          method: GET
          path: /api/usuarios/{id}
          authorizer:
            name: cognitoJwt

  createUsuario:
    handler: src/handlers/usuarios.createUsuario
    events:
      - httpApi:
          method: POST
          path: /api/usuarios
          authorizer:
            name: cognitoJwt

  updateUsuario:
    handler: src/handlers/usuarios.updateUsuario
    events:
      - httpApi:
          method: PUT
          path: /api/usuarios/{id}
          authorizer:
            name: cognitoJwt

  deleteUsuario:
    handler: src/handlers/usuarios.deleteUsuario
    events:
      - httpApi:
          method: DELETE
          path: /api/usuarios/{id}
          authorizer:
            name: cognitoJwt

  toggleUsuarioEstado:
    handler: src/handlers/usuarios.toggleUsuarioEstado
    events:
      - httpApi:
          method: PATCH
          path: /api/usuarios/{id}/toggle
          authorizer:
            name: cognitoJwt

  getPerfilActual:
    handler: src/handlers/usuarios.getPerfilActual
    events:
      - httpApi:
          method: GET
          path: /api/usuarios/perfil
          authorizer:
            name: cognitoJwt

  updatePerfilActual:
    handler: src/handlers/usuarios.updatePerfilActual
    events:
      - httpApi:
          method: PUT
          path: /api/usuarios/perfil
          authorizer:
            name: cognitoJwt

  cambiarPassword:
    handler: src/handlers/usuarios.cambiarPassword
    events:
      - httpApi:
          method: POST
          path: /api/usuarios/cambiar-password
          authorizer:
            name: cognitoJwt

  # Responsables con protección Cognito
  getResponsables:
    handler: src/handlers/responsables.getResponsables
    events:
      - httpApi:
          method: GET
          path: /api/responsables
          authorizer:
            name: cognitoJwt

  getResponsable:
    handler: src/handlers/responsables.getResponsable
    events:
      - httpApi:
          method: GET
          path: /api/responsables/{id}
          authorizer:
            name: cognitoJwt

  createResponsable:
    handler: src/handlers/responsables.createResponsable
    events:
      - httpApi:
          method: POST
          path: /api/responsables
          authorizer:
            name: cognitoJwt

  updateResponsable:
    handler: src/handlers/responsables.updateResponsable
    events:
      - httpApi:
          method: PUT
          path: /api/responsables/{id}
          authorizer:
            name: cognitoJwt

  deleteResponsable:
    handler: src/handlers/responsables.deleteResponsable
    events:
      - httpApi:
          method: DELETE
          path: /api/responsables/{id}
          authorizer:
            name: cognitoJwt

  toggleResponsableEstado:
    handler: src/handlers/responsables.toggleResponsableEstado
    events:
      - httpApi:
          method: PATCH
          path: /api/responsables/{id}/toggle
          authorizer:
            name: cognitoJwt

  getResponsablesPorArea:
    handler: src/handlers/responsables.getResponsablesPorArea
    events:
      - httpApi:
          method: GET
          path: /api/responsables/area/{area}
          authorizer:
            name: cognitoJwt

  getEspaciosAsignados:
    handler: src/handlers/responsables.getEspaciosAsignados
    events:
      - httpApi:
          method: GET
          path: /api/responsables/{id}/espacios
          authorizer:
            name: cognitoJwt

  asignarEspacio:
    handler: src/handlers/responsables.asignarEspacio
    events:
      - httpApi:
          method: POST
          path: /api/responsables/{id}/asignar-espacio
          authorizer:
            name: cognitoJwt

  estadisticasResponsables:
    handler: src/handlers/responsables.getEstadisticasResponsables
    events:
      - httpApi:
          method: GET
          path: /api/responsables/estadisticas
          authorizer:
            name: cognitoJwt

  # Zonas con protección Cognito
  getZonas:
    handler: src/handlers/zonas.getZonas
    events:
      - httpApi:
          method: GET
          path: /api/zonas
          authorizer:
            name: cognitoJwt

  getZona:
    handler: src/handlers/zonas.getZona
    events:
      - httpApi:
          method: GET
          path: /api/zonas/{id}
          authorizer:
            name: cognitoJwt

  createZona:
    handler: src/handlers/zonas.createZona
    events:
      - httpApi:
          method: POST
          path: /api/zonas
          authorizer:
            name: cognitoJwt

  updateZona:
    handler: src/handlers/zonas.updateZona
    events:
      - httpApi:
          method: PUT
          path: /api/zonas/{id}
          authorizer:
            name: cognitoJwt

  deleteZona:
    handler: src/handlers/zonas.deleteZona
    events:
      - httpApi:
          method: DELETE
          path: /api/zonas/{id}
          authorizer:
            name: cognitoJwt

  toggleZonaEstado:
    handler: src/handlers/zonas.toggleZonaEstado
    events:
      - httpApi:
          method: PATCH
          path: /api/zonas/{id}/toggle
          authorizer:
            name: cognitoJwt

  getZonasPorPiso:
    handler: src/handlers/zonas.getZonasPorPiso
    events:
      - httpApi:
          method: GET
          path: /api/zonas/piso/{piso}
          authorizer:
            name: cognitoJwt

  getEspaciosZona:
    handler: src/handlers/zonas.getEspaciosZona
    events:
      - httpApi:
          method: GET
          path: /api/zonas/{id}/espacios
          authorizer:
            name: cognitoJwt

  estadisticasZonas:
    handler: src/handlers/zonas.getEstadisticasZonas
    events:
      - httpApi:
          method: GET
          path: /api/zonas/estadisticas
          authorizer:
            name: cognitoJwt

  getPisosDisponibles:
    handler: src/handlers/zonas.getPisosDisponibles
    events:
      - httpApi:
          method: GET
          path: /api/zonas/pisos
          authorizer:
            name: cognitoJwt

  getEdificiosDisponibles:
    handler: src/handlers/zonas.getEdificiosDisponibles
    events:
      - httpApi:
          method: GET
          path: /api/zonas/edificios
          authorizer:
            name: cognitoJwt

  # === ENDPOINTS MÓVILES OPTIMIZADOS ===
  
  # Dashboard móvil optimizado
  getMobileDashboard:
    handler: src/handlers/mobile.getMobileDashboard
    timeout: 8
    memorySize: 512
    events:
      - httpApi:
          method: GET
          path: /api/mobile/dashboard
          authorizer:
            name: cognitoJwt

  # Espacios optimizados para móvil
  getMobileSpaces:
    handler: src/handlers/mobile.getMobileSpaces
    timeout: 10
    memorySize: 512
    events:
      - httpApi:
          method: GET
          path: /api/mobile/spaces
          authorizer:
            name: cognitoJwt

  # Reservas del usuario optimizadas para móvil
  getMobileReservations:
    handler: src/handlers/mobile.getMobileReservations
    timeout: 8
    memorySize: 256
    events:
      - httpApi:
          method: GET
          path: /api/mobile/reservations
          authorizer:
            name: cognitoJwt

  # Crear reserva optimizada para móvil
  createMobileReservation:
    handler: src/handlers/mobile.createMobileReservation
    timeout: 12
    memorySize: 512
    events:
      - httpApi:
          method: POST
          path: /api/mobile/reservations
          authorizer:
            name: cognitoJwt

  # Tipos de espacios para filtros móviles
  getSpaceTypes:
    handler: src/handlers/mobile.getSpaceTypes
    timeout: 5
    memorySize: 256
    events:
      - httpApi:
          method: GET
          path: /api/mobile/space-types
          authorizer:
            name: cognitoJwt

  # === ENDPOINTS ESPECÍFICOS PARA MODO VERTICAL (SIN SCROLL) ===
  
  # Dashboard ultra-compacto para modo vertical
  getVerticalDashboard:
    handler: src/handlers/vertical.getVerticalDashboard
    timeout: 6
    memorySize: 256
    events:
      - httpApi:
          method: GET
          path: /api/vertical/dashboard
          authorizer:
            name: cognitoJwt

  # Espacios paginados para modo vertical (sin scroll)
  getVerticalSpaces:
    handler: src/handlers/vertical.getVerticalSpaces
    timeout: 8
    memorySize: 256
    events:
      - httpApi:
          method: GET
          path: /api/vertical/spaces
          authorizer:
            name: cognitoJwt

  # Crear reserva optimizada para modo vertical
  createVerticalReservation:
    handler: src/handlers/vertical.createVerticalReservation
    timeout: 10
    memorySize: 256
    events:
      - httpApi:
          method: POST
          path: /api/vertical/reservations
          authorizer:
            name: cognitoJwt

  # === ENDPOINTS ESPECÍFICOS PARA MODO HORIZONTAL (SIN SCROLL) ===
  
  # Dashboard en columnas para modo horizontal
  getHorizontalDashboard:
    handler: src/handlers/horizontal.getHorizontalDashboard
    timeout: 10
    memorySize: 256
    events:
      - httpApi:
          method: GET
          path: /api/horizontal/dashboard
          authorizer:
            name: cognitoJwt

  # Grid de espacios para modo horizontal (2-3 columnas)
  getHorizontalSpaces:
    handler: src/handlers/horizontal.getHorizontalSpaces
    timeout: 8
    memorySize: 256
    events:
      - httpApi:
          method: GET
          path: /api/horizontal/spaces
          authorizer:
            name: cognitoJwt

  # Crear reserva con layout horizontal
  createHorizontalReservation:
    handler: src/handlers/horizontal.createHorizontalReservation
    timeout: 10
    memorySize: 256
    events:
      - httpApi:
          method: POST
          path: /api/horizontal/reservations
          authorizer:
            name: cognitoJwt

  # Worker para procesamiento asíncrono
  queueWorker:
    handler: src/handlers/queueWorker.process
    timeout: 30
    memorySize: 256
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ MyQueue, Arn ]
          batchSize: 10
          maximumBatchingWindow: 30

  # Endpoints de monitoreo de resiliencia (Retry + Circuit Breaker + Bulkhead)
  resilienceHealth:
    handler: src/handlers/healthCheck.getResilienceHealth
    events:
      - httpApi:
          method: GET
          path: /api/health/resilience

  completeResilienceHealth:
    handler: src/handlers/healthCheck.getCompleteResilienceHealth
    events:
      - httpApi:
          method: GET
          path: /api/health/resilience/complete

  bulkheadStatus:
    handler: src/handlers/healthCheck.getBulkheadStatus
    events:
      - httpApi:
          method: GET
          path: /api/health/bulkhead
          authorizer:
            name: cognitoJwt

  resetResilienceMetrics:
    handler: src/handlers/healthCheck.resetResilienceMetrics
    events:
      - httpApi:
          method: POST
          path: /api/health/resilience/reset
          authorizer:
            name: cognitoJwt

  resilienceConfiguration:
    handler: src/handlers/healthCheck.getResilienceConfiguration
    events:
      - httpApi:
          method: GET
          path: /api/health/resilience/config
          authorizer:
            name: cognitoJwt

  # === SNS NOTIFICATION FUNCTIONS ===
  
  # Envío de notificaciones de espacios
  sendSpaceNotification:
    handler: src/handlers/sns.sendSpaceNotification
    events:
      - httpApi:
          method: POST
          path: /api/notifications/spaces
          authorizer:
            name: cognitoJwt

  # Envío de alertas del sistema
  sendSystemAlert:
    handler: src/handlers/sns.sendSystemAlert
    events:
      - httpApi:
          method: POST
          path: /api/notifications/alerts
          authorizer:
            name: cognitoJwt

  # Notificaciones de administración
  sendAdminNotification:
    handler: src/handlers/sns.sendAdminNotification
    events:
      - httpApi:
          method: POST
          path: /api/notifications/admin
          authorizer:
            name: cognitoJwt

  # Procesar notificaciones SNS (triggered by SNS)
  processSpaceNotification:
    handler: src/handlers/sns.processSpaceNotification
    events:
      - sns:
          topicName: ${self:service}-${sls:stage}-space-notifications

  processSystemAlert:
    handler: src/handlers/sns.processSystemAlert
    events:
      - sns:
          topicName: ${self:service}-${sls:stage}-system-alerts

  processAdminNotification:
    handler: src/handlers/sns.processAdminNotification
    events:
      - sns:
          topicName: ${self:service}-${sls:stage}-admin-notifications

  # Suscripción a notificaciones
  subscribeToNotifications:
    handler: src/handlers/sns.subscribeToNotifications
    events:
      - httpApi:
          method: POST
          path: /api/notifications/subscribe
          authorizer:
            name: cognitoJwt

  # Listar suscripciones
  listSubscriptions:
    handler: src/handlers/sns.listSubscriptions
    events:
      - httpApi:
          method: GET
          path: /api/notifications/subscriptions
          authorizer:
            name: cognitoJwt

  # === WEBSOCKET FUNCTIONS FOR REAL-TIME ===
  
  # WebSocket connection management
  websocketConnect:
    handler: src/handlers/websocket.connect
    description: "Maneja nuevas conexiones WebSocket para tiempo real"
    timeout: 10
    memorySize: 256
    events:
      - websocket:
          route: $connect

  websocketDisconnect:
    handler: src/handlers/websocket.disconnect
    description: "Maneja desconexiones WebSocket"
    timeout: 8
    memorySize: 256
    events:
      - websocket:
          route: $disconnect

  websocketMessage:
    handler: src/handlers/websocket.message
    description: "Maneja mensajes WebSocket por defecto"
    timeout: 10
    memorySize: 256
    events:
      - websocket:
          route: $default

  # Real-time triggers from DynamoDB Streams
  realtimeReservaNotify:
    handler: src/handlers/websocket.notifyReserva
    description: "Notifica en tiempo real cuando se crean/modifican reservas"
    timeout: 15
    memorySize: 512
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [DynamoDBTable, StreamArn]
          batchSize: 10
          startingPosition: LATEST
          filterPatterns:
            - eventName: [INSERT, MODIFY]

  realtimeEspacioNotify:
    handler: src/handlers/websocket.notifyEspacioEstado
    description: "Notifica cuando cambia el estado de espacios"
    timeout: 15
    memorySize: 512
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [DynamoDBTable, StreamArn]
          batchSize: 10
          startingPosition: LATEST
          filterPatterns:
            - eventName: [MODIFY]

  # Manual stats update function
  realtimeStatsUpdate:
    handler: src/handlers/websocket.sendStats
    description: "Envía estadísticas actualizadas a todos los clientes WebSocket"
    timeout: 20
    memorySize: 1024
    events:
      - schedule: rate(5 minutes)
      - httpApi:
          method: POST
          path: /api/realtime/stats
          authorizer:
            name: cognitoJwt


package:
  individually: true
  patterns:
    - '!**/*.md'
    - '!**/*.test.*'
  #   apiVersion: '2012-11-05'
  #   endpoint: http://localhost:4566  # LocalStack
  #   region: ${self:provider.region}
  #   accessKeyId: root
  #   secretAccessKey: root
  #   queues:
  #     - ${self:service}-${sls:stage}-queue

resources:
  Resources:
    # Condition to control creation of frontend resources
    CreateWebsiteCondition:
      Type: "AWS::CloudFormation::Condition"
      Properties:
        Expression: !Equals [ ${self:custom.frontend.createWebsite}, 'true' ]

    MyQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-queue
        VisibilityTimeout: 60
        MessageRetentionPeriod: 1209600
    
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-table
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    # WebSocket Connections Table for real-time
    WebSocketConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
            
    # === FRONTEND RESOURCES ===
    
    # S3 bucket para el frontend
    WebsiteBucket:
      Condition: CreateWebsiteCondition
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.frontendBucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: 404.html
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET]
              AllowedOrigins: ['*']
              MaxAge: 3000
    
    # Política de bucket para permitir acceso público
    WebsiteBucketPolicy:
      Condition: CreateWebsiteCondition
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref WebsiteBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
              Resource: !Sub "arn:aws:s3:::${WebsiteBucket}/*"
    
    # CloudFront para CDN del frontend
    WebsiteCloudFrontDistribution:
      Condition: CreateWebsiteCondition
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: !GetAtt WebsiteBucket.RegionalDomainName
              Id: S3Origin
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: http-only
          Enabled: true
          DefaultRootObject: index.html
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            TargetOriginId: S3Origin
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          CustomErrorResponses:
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
        # TimeToLiveSpecification removed: not a valid property for CloudFront Distribution

    # WebSocket API Gateway
    WebSocketApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}-websocket-${sls:stage}
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: "$request.body.action"

    # WebSocket Stage
    WebSocketStage:
      Type: AWS::ApiGatewayV2::Stage
      Properties:
        ApiId: !Ref WebSocketApi
        StageName: ${sls:stage}
        AutoDeploy: true

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${sls:stage}-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: name
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: family_name
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: custom:role
            AttributeDataType: String
            Required: false
            Mutable: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${sls:stage}-app
        GenerateSecret: false
        UserPoolId: { Ref: CognitoUserPool }
        PreventUserExistenceErrors: ENABLED
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
        AccessTokenValidity: 60
        IdTokenValidity: 60
        RefreshTokenValidity: 30
        TokenValidityUnits:
          AccessToken: minutes
          IdToken: minutes
          RefreshToken: days
        # Use Cognito defaults for Read/Write attributes (email, phone_number, etc.)
        # ReadAttributes and WriteAttributes removed to avoid invalid attribute errors

    # === SNS TOPICS ===
    
    # Topic para notificaciones de espacios (creación, actualización, asignación)
    SpaceNotificationsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${sls:stage}-space-notifications
        DisplayName: Space Management Notifications
        
    # Topic para alertas del sistema (errores, mantenimiento, capacidad)
    SystemAlertsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${sls:stage}-system-alerts
        DisplayName: System Alerts
        
    # Topic para notificaciones de administración (reports, backups, security)
    AdminNotificationsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service}-${sls:stage}-admin-notifications
        DisplayName: Admin Notifications

    # === CLOUDWATCH ALARMS PARA MONITOREO MÓVIL ===
    
    # Alarma para errores de autenticación móvil
    MobileAuthErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${sls:stage}-mobile-auth-errors
        AlarmDescription: Demasiados errores de autenticación desde móviles
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 2
        Threshold: 5
        ComparisonOperator: GreaterThanThreshold
        AlarmActions:
          - { Ref: SystemAlertsTopic }
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${sls:stage}-login

    # Alarma para latencia alta en endpoints móviles
    MobileHighLatencyAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${sls:stage}-mobile-high-latency
        AlarmDescription: Latencia alta en endpoints móviles
        MetricName: Duration
        Namespace: AWS/Lambda
        Statistic: Average
        Period: 300
        EvaluationPeriods: 2
        Threshold: 8000  # 8 segundos
        ComparisonOperator: GreaterThanThreshold
        AlarmActions:
          - { Ref: SystemAlertsTopic }
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${sls:stage}-getMobileDashboard

    # Alarma para fallos en dashboard móvil
    MobileDashboardErrorAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: ${self:service}-${sls:stage}-mobile-dashboard-errors
        AlarmDescription: Errores en dashboard móvil
        MetricName: Errors
        Namespace: AWS/Lambda
        Statistic: Sum
        Period: 300
        EvaluationPeriods: 1
        Threshold: 3
        ComparisonOperator: GreaterThanThreshold
        AlarmActions:
          - { Ref: SystemAlertsTopic }
        Dimensions:
          - Name: FunctionName
            Value: ${self:service}-${sls:stage}-getMobileDashboard
        
  Outputs:
    QueueUrl:
      Value: { Ref: MyQueue }
    DynamoDBTable:
      Value: { Ref: DynamoDBTable }
    DynamoDBTableArn:
      Value: { Fn::GetAtt: [ DynamoDBTable, Arn ] }
    UserPoolId:
      Value: { Ref: CognitoUserPool }
      Description: Cognito User Pool ID
    UserPoolClientId:
      Value: { Ref: CognitoUserPoolClient }
      Description: Cognito User Pool Client ID
    CognitoUserPoolArn:
      Value: { Fn::GetAtt: [ CognitoUserPool, Arn ] }
      Description: Cognito User Pool ARN
    SpaceNotificationsTopic:
      Value: { Ref: SpaceNotificationsTopic }
      Description: SNS Topic for Space Notifications
    SystemAlertsTopic:
      Value: { Ref: SystemAlertsTopic }
      Description: SNS Topic for System Alerts
    AdminNotificationsTopic:
      Value: { Ref: AdminNotificationsTopic }
      Description: SNS Topic for Admin Notifications
    SpaceNotificationsTopicArn:
      Value: { Ref: SpaceNotificationsTopic }
      Description: SNS Topic ARN for Space Notifications
    SystemAlertsTopicArn:
      Value: { Ref: SystemAlertsTopic }
      Description: SNS Topic ARN for System Alerts
    AdminNotificationsTopicArn:
      Value: { Ref: AdminNotificationsTopic }
      Description: SNS Topic ARN for Admin Notifications
    # WebSocket outputs
    WebSocketApiUrl:
      Value: 
        Fn::Sub: "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/${sls:stage}"
      Description: "WebSocket API Gateway URL for real-time connections"
      Export:
        Name: ${self:service}-websocket-url-${sls:stage}
    WebSocketConnectionsTable:
      Value: { Ref: WebSocketConnectionsTable }
      Description: "WebSocket connections table"
    WebSocketConnectionsTableArn:
      Value: { Fn::GetAtt: [ WebSocketConnectionsTable, Arn ] }
      Description: "WebSocket connections table ARN"
    # Frontend deployment outputs
    WebsiteBucketName:
      Value: { Ref: WebsiteBucket }
      Description: "S3 bucket for static website"
    WebsiteDistributionId:
      Value: { Ref: WebsiteCloudFrontDistribution }
      Description: "CloudFront distribution ID"
    WebsiteURL:
      Value: { "Fn::GetAtt": [ WebsiteCloudFrontDistribution, DomainName ] }
      Description: "URL of the deployed frontend website"
