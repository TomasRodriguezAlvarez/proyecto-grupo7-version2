service: sistema-espacios-hospitalarios
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    QUEUE_URL: { Ref: MyQueue }
    DB_TYPE: dynamodb
    DYNAMODB_TABLE: ${self:service}-${sls:stage}-table
    USER_POOL_ID: { Ref: CognitoUserPool }
    USER_POOL_CLIENT_ID: { Ref: CognitoUserPoolClient }
    JWT_SECRET: ${env:JWT_SECRET, 'your-super-secret-jwt-key-change-in-production'}
    NODE_ENV: ${sls:stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            Fn::GetAtt: [ MyQueue, Arn ]
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ DynamoDBTable, Arn ]
            - Fn::Join:
                - '/'
                - - Fn::GetAtt: [ DynamoDBTable, Arn ]
                  - '*'
        - Effect: Allow
          Action:
            - cognito-idp:AdminInitiateAuth
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminSetUserPassword
            - cognito-idp:AdminGetUser
            - cognito-idp:InitiateAuth
            - cognito-idp:RespondToAuthChallenge
          Resource:
            - Fn::GetAtt: [ CognitoUserPool, Arn ]
  logs:
    httpApi: true
  tracing:
    lambda: true
  httpApi:
    authorizers:
      cognitoJwt:
        type: jwt
        identitySource: $request.header.Authorization
        issuerUrl:
          Fn::Sub:
            - https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPoolId}
            - { UserPoolId: { Ref: CognitoUserPool } }
        audience:
          - { Ref: CognitoUserPoolClient }

functions:
  # Autenticación con Cognito
  login:
    handler: src/handlers/cognitoAuth.login
    events:
      - httpApi:
          method: POST
          path: /api/auth/login

  refresh:
    handler: src/handlers/cognitoAuth.refresh
    events:
      - httpApi:
          method: POST
          path: /api/auth/refresh

  me:
    handler: src/handlers/cognitoAuth.me
    events:
      - httpApi:
          method: GET
          path: /api/me
          authorizer:
            name: cognitoJwt

  # Endpoints originales con autorización de Cognito
  logout:
    handler: src/handlers/auth.logout
    events:
      - httpApi:
          method: POST
          path: /api/auth/logout
          authorizer:
            name: cognitoJwt

  register:
    handler: src/handlers/auth.register
    events:
      - httpApi:
          method: POST
          path: /api/auth/register

  # Dashboard con protección Cognito
  dashboard:
    handler: src/handlers/dashboard.getDashboard
    events:
      - httpApi:
          method: GET
          path: /api/dashboard
          authorizer:
            name: cognitoJwt

  estadisticasDetalladas:
    handler: src/handlers/dashboard.getEstadisticasDetalladas
    events:
      - httpApi:
          method: GET
          path: /api/dashboard/estadisticas
          authorizer:
            name: cognitoJwt

  # Espacios con protección Cognito
  getEspacios:
    handler: src/handlers/espacios.getEspacios
    events:
      - httpApi:
          method: GET
          path: /api/espacios
          authorizer:
            name: cognitoJwt

  getEspacio:
    handler: src/handlers/espacios.getEspacio
    events:
      - httpApi:
          method: GET
          path: /api/espacios/{id}
          authorizer:
            name: cognitoJwt

  createEspacio:
    handler: src/handlers/espacios.createEspacio
    events:
      - httpApi:
          method: POST
          path: /api/espacios
          authorizer:
            name: cognitoJwt

  updateEspacio:
    handler: src/handlers/espacios.updateEspacio
    events:
      - httpApi:
          method: PUT
          path: /api/espacios/{id}
          authorizer:
            name: cognitoJwt

  deleteEspacio:
    handler: src/handlers/espacios.deleteEspacio
    events:
      - httpApi:
          method: DELETE
          path: /api/espacios/{id}
          authorizer:
            name: cognitoJwt

  estadisticasEspacios:
    handler: src/handlers/espacios.getEstadisticasEspacios
    events:
      - httpApi:
          method: GET
          path: /api/espacios/estadisticas
          authorizer:
            name: cognitoJwt

  # Reservas con protección Cognito
  getReservas:
    handler: src/handlers/reservas.getReservas
    events:
      - httpApi:
          method: GET
          path: /api/reservas
          authorizer:
            name: cognitoJwt

  getReserva:
    handler: src/handlers/reservas.getReserva
    events:
      - httpApi:
          method: GET
          path: /api/reservas/{id}
          authorizer:
            name: cognitoJwt

  createReserva:
    handler: src/handlers/reservas.createReserva
    events:
      - httpApi:
          method: POST
          path: /api/reservas
          authorizer:
            name: cognitoJwt

  updateReserva:
    handler: src/handlers/reservas.updateReserva
    events:
      - httpApi:
          method: PUT
          path: /api/reservas/{id}
          authorizer:
            name: cognitoJwt

  cancelReserva:
    handler: src/handlers/reservas.cancelReserva
    events:
      - httpApi:
          method: PATCH
          path: /api/reservas/{id}/cancel
          authorizer:
            name: cognitoJwt

  deleteReserva:
    handler: src/handlers/reservas.deleteReserva
    events:
      - httpApi:
          method: DELETE
          path: /api/reservas/{id}
          authorizer:
            name: cognitoJwt

  estadisticasReservas:
    handler: src/handlers/reservas.getEstadisticasReservas
    events:
      - httpApi:
          method: GET
          path: /api/reservas/estadisticas
          authorizer:
            name: cognitoJwt

  # Usuarios con protección Cognito
  getUsuarios:
    handler: src/handlers/usuarios.getUsuarios
    events:
      - httpApi:
          method: GET
          path: /api/usuarios
          authorizer:
            name: cognitoJwt

  getUsuario:
    handler: src/handlers/usuarios.getUsuario
    events:
      - httpApi:
          method: GET
          path: /api/usuarios/{id}
          authorizer:
            name: cognitoJwt

  createUsuario:
    handler: src/handlers/usuarios.createUsuario
    events:
      - httpApi:
          method: POST
          path: /api/usuarios
          authorizer:
            name: cognitoJwt

  updateUsuario:
    handler: src/handlers/usuarios.updateUsuario
    events:
      - httpApi:
          method: PUT
          path: /api/usuarios/{id}
          authorizer:
            name: cognitoJwt

  deleteUsuario:
    handler: src/handlers/usuarios.deleteUsuario
    events:
      - httpApi:
          method: DELETE
          path: /api/usuarios/{id}
          authorizer:
            name: cognitoJwt

  toggleUsuarioEstado:
    handler: src/handlers/usuarios.toggleUsuarioEstado
    events:
      - httpApi:
          method: PATCH
          path: /api/usuarios/{id}/toggle
          authorizer:
            name: cognitoJwt

  getPerfilActual:
    handler: src/handlers/usuarios.getPerfilActual
    events:
      - httpApi:
          method: GET
          path: /api/usuarios/perfil
          authorizer:
            name: cognitoJwt

  updatePerfilActual:
    handler: src/handlers/usuarios.updatePerfilActual
    events:
      - httpApi:
          method: PUT
          path: /api/usuarios/perfil
          authorizer:
            name: cognitoJwt

  cambiarPassword:
    handler: src/handlers/usuarios.cambiarPassword
    events:
      - httpApi:
          method: POST
          path: /api/usuarios/cambiar-password
          authorizer:
            name: cognitoJwt

  # Recursos con protección Cognito
  getRecursos:
    handler: src/handlers/recursos.getRecursos
    events:
      - httpApi:
          method: GET
          path: /api/recursos
          authorizer:
            name: cognitoJwt

  getRecurso:
    handler: src/handlers/recursos.getRecurso
    events:
      - httpApi:
          method: GET
          path: /api/recursos/{id}
          authorizer:
            name: cognitoJwt

  createRecurso:
    handler: src/handlers/recursos.createRecurso
    events:
      - httpApi:
          method: POST
          path: /api/recursos
          authorizer:
            name: cognitoJwt

  updateRecurso:
    handler: src/handlers/recursos.updateRecurso
    events:
      - httpApi:
          method: PUT
          path: /api/recursos/{id}
          authorizer:
            name: cognitoJwt

  deleteRecurso:
    handler: src/handlers/recursos.deleteRecurso
    events:
      - httpApi:
          method: DELETE
          path: /api/recursos/{id}
          authorizer:
            name: cognitoJwt

  toggleDisponibilidad:
    handler: src/handlers/recursos.toggleDisponibilidad
    events:
      - httpApi:
          method: PATCH
          path: /api/recursos/{id}/disponibilidad
          authorizer:
            name: cognitoJwt

  getRecursosPorTipo:
    handler: src/handlers/recursos.getRecursosPorTipo
    events:
      - httpApi:
          method: GET
          path: /api/recursos/tipo/{tipo}
          authorizer:
            name: cognitoJwt

  estadisticasRecursos:
    handler: src/handlers/recursos.getEstadisticasRecursos
    events:
      - httpApi:
          method: GET
          path: /api/recursos/estadisticas
          authorizer:
            name: cognitoJwt

  buscarRecursos:
    handler: src/handlers/recursos.buscarRecursos
    events:
      - httpApi:
          method: GET
          path: /api/recursos/buscar
          authorizer:
            name: cognitoJwt

  # Responsables con protección Cognito
  getResponsables:
    handler: src/handlers/responsables.getResponsables
    events:
      - httpApi:
          method: GET
          path: /api/responsables
          authorizer:
            name: cognitoJwt

  getResponsable:
    handler: src/handlers/responsables.getResponsable
    events:
      - httpApi:
          method: GET
          path: /api/responsables/{id}
          authorizer:
            name: cognitoJwt

  createResponsable:
    handler: src/handlers/responsables.createResponsable
    events:
      - httpApi:
          method: POST
          path: /api/responsables
          authorizer:
            name: cognitoJwt

  updateResponsable:
    handler: src/handlers/responsables.updateResponsable
    events:
      - httpApi:
          method: PUT
          path: /api/responsables/{id}
          authorizer:
            name: cognitoJwt

  deleteResponsable:
    handler: src/handlers/responsables.deleteResponsable
    events:
      - httpApi:
          method: DELETE
          path: /api/responsables/{id}
          authorizer:
            name: cognitoJwt

  toggleResponsableEstado:
    handler: src/handlers/responsables.toggleResponsableEstado
    events:
      - httpApi:
          method: PATCH
          path: /api/responsables/{id}/toggle
          authorizer:
            name: cognitoJwt

  getResponsablesPorArea:
    handler: src/handlers/responsables.getResponsablesPorArea
    events:
      - httpApi:
          method: GET
          path: /api/responsables/area/{area}
          authorizer:
            name: cognitoJwt

  getEspaciosAsignados:
    handler: src/handlers/responsables.getEspaciosAsignados
    events:
      - httpApi:
          method: GET
          path: /api/responsables/{id}/espacios
          authorizer:
            name: cognitoJwt

  asignarEspacio:
    handler: src/handlers/responsables.asignarEspacio
    events:
      - httpApi:
          method: POST
          path: /api/responsables/{id}/asignar-espacio
          authorizer:
            name: cognitoJwt

  estadisticasResponsables:
    handler: src/handlers/responsables.getEstadisticasResponsables
    events:
      - httpApi:
          method: GET
          path: /api/responsables/estadisticas
          authorizer:
            name: cognitoJwt

  # Zonas con protección Cognito
  getZonas:
    handler: src/handlers/zonas.getZonas
    events:
      - httpApi:
          method: GET
          path: /api/zonas
          authorizer:
            name: cognitoJwt

  getZona:
    handler: src/handlers/zonas.getZona
    events:
      - httpApi:
          method: GET
          path: /api/zonas/{id}
          authorizer:
            name: cognitoJwt

  createZona:
    handler: src/handlers/zonas.createZona
    events:
      - httpApi:
          method: POST
          path: /api/zonas
          authorizer:
            name: cognitoJwt

  updateZona:
    handler: src/handlers/zonas.updateZona
    events:
      - httpApi:
          method: PUT
          path: /api/zonas/{id}
          authorizer:
            name: cognitoJwt

  deleteZona:
    handler: src/handlers/zonas.deleteZona
    events:
      - httpApi:
          method: DELETE
          path: /api/zonas/{id}
          authorizer:
            name: cognitoJwt

  toggleZonaEstado:
    handler: src/handlers/zonas.toggleZonaEstado
    events:
      - httpApi:
          method: PATCH
          path: /api/zonas/{id}/toggle
          authorizer:
            name: cognitoJwt

  getZonasPorPiso:
    handler: src/handlers/zonas.getZonasPorPiso
    events:
      - httpApi:
          method: GET
          path: /api/zonas/piso/{piso}
          authorizer:
            name: cognitoJwt

  getEspaciosZona:
    handler: src/handlers/zonas.getEspaciosZona
    events:
      - httpApi:
          method: GET
          path: /api/zonas/{id}/espacios
          authorizer:
            name: cognitoJwt

  estadisticasZonas:
    handler: src/handlers/zonas.getEstadisticasZonas
    events:
      - httpApi:
          method: GET
          path: /api/zonas/estadisticas
          authorizer:
            name: cognitoJwt

  getPisosDisponibles:
    handler: src/handlers/zonas.getPisosDisponibles
    events:
      - httpApi:
          method: GET
          path: /api/zonas/pisos
          authorizer:
            name: cognitoJwt

  getEdificiosDisponibles:
    handler: src/handlers/zonas.getEdificiosDisponibles
    events:
      - httpApi:
          method: GET
          path: /api/zonas/edificios
          authorizer:
            name: cognitoJwt

  # Worker para procesamiento asíncrono
  queueWorker:
    handler: src/handlers/queueWorker.process
    timeout: 30
    memorySize: 256
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ MyQueue, Arn ]
          batchSize: 10
          maximumBatchingWindow: 30

  # Endpoints de monitoreo de resiliencia (Retry + Circuit Breaker + Bulkhead)
  resilienceHealth:
    handler: src/handlers/healthCheck.getResilienceHealth
    events:
      - httpApi:
          method: GET
          path: /api/health/resilience

  completeResilienceHealth:
    handler: src/handlers/healthCheck.getCompleteResilienceHealth
    events:
      - httpApi:
          method: GET
          path: /api/health/resilience/complete

  bulkheadStatus:
    handler: src/handlers/healthCheck.getBulkheadStatus
    events:
      - httpApi:
          method: GET
          path: /api/health/bulkhead
          authorizer:
            name: cognitoJwt

  resetResilienceMetrics:
    handler: src/handlers/healthCheck.resetResilienceMetrics
    events:
      - httpApi:
          method: POST
          path: /api/health/resilience/reset
          authorizer:
            name: cognitoJwt

  testResiliencePatterns:
    handler: src/handlers/healthCheck.testResiliencePatterns
    events:
      - httpApi:
          method: POST
          path: /api/health/resilience/test
          authorizer:
            name: cognitoJwt

  resilienceConfiguration:
    handler: src/handlers/healthCheck.getResilienceConfiguration
    events:
      - httpApi:
          method: GET
          path: /api/health/resilience/config
          authorizer:
            name: cognitoJwt

plugins:
  - serverless-offline
  # Uncomment if you want to drive SQS locally with LocalStack:
  # - serverless-offline-sqs

package:
  individually: true
  patterns:
    - '!**/*.md'
    - '!**/*.test.*'

custom:
  serverless-offline:
    httpPort: 3000
  # serverless-offline-sqs:
  #   autoCreate: true
  #   apiVersion: '2012-11-05'
  #   endpoint: http://localhost:4566  # LocalStack
  #   region: ${self:provider.region}
  #   accessKeyId: root
  #   secretAccessKey: root
  #   queues:
  #     - ${self:service}-${sls:stage}-queue

resources:
  Resources:
    MyQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${sls:stage}-queue
        VisibilityTimeout: 60
        MessageRetentionPeriod: 1209600
    
    DynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${sls:stage}-table
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-${sls:stage}-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
        Schema:
          - Name: email
            AttributeDataType: String
            Required: true
            Mutable: true
          - Name: name
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: family_name
            AttributeDataType: String
            Required: false
            Mutable: true
          - Name: custom:role
            AttributeDataType: String
            Required: false
            Mutable: true

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-${sls:stage}-app
        GenerateSecret: false
        UserPoolId: { Ref: CognitoUserPool }
        PreventUserExistenceErrors: ENABLED
        ExplicitAuthFlows:
          - ALLOW_USER_PASSWORD_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
          - ALLOW_ADMIN_USER_PASSWORD_AUTH
        AccessTokenValidity: 60
        IdTokenValidity: 60
        RefreshTokenValidity: 30
        TokenValidityUnits:
          AccessToken: minutes
          IdToken: minutes
          RefreshToken: days
        WriteAttributes:
          - email
          - name
          - family_name
          - custom:role
        ReadAttributes:
          - email
          - name
          - family_name
          - custom:role
        
  Outputs:
    QueueUrl:
      Value: { Ref: MyQueue }
    DynamoDBTable:
      Value: { Ref: DynamoDBTable }
    DynamoDBTableArn:
      Value: { Fn::GetAtt: [ DynamoDBTable, Arn ] }
    UserPoolId:
      Value: { Ref: CognitoUserPool }
      Description: Cognito User Pool ID
    UserPoolClientId:
      Value: { Ref: CognitoUserPoolClient }
      Description: Cognito User Pool Client ID
    CognitoUserPoolArn:
      Value: { Fn::GetAtt: [ CognitoUserPool, Arn ] }
      Description: Cognito User Pool ARN
